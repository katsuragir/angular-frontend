import { __awaiter, __generator, __spread, __values } from 'tslib';
import { InjectionToken, APP_INITIALIZER, isDevMode, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, APP_BOOTSTRAP_LISTENER, Directive, Input, Optional, HostListener, Host, NgModule } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new InjectionToken('ngx-hotjar-settings', {
    factory: (/**
     * @return {?}
     */
    function () { return ({ trackingCode: '' }); })
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
    ]
};
/**
 * @param {?} $settings
 * @return {?}
 */
function GoogleAnalyticsInitializer($settings) {
    var _this = this;
    return (/**
     * @return {?}
     */
    function () { return __awaiter(_this, void 0, void 0, function () {
        var e_1, _a, initialCommands, _b, _c, command, s, head;
        return __generator(this, function (_d) {
            if (!$settings.trackingCode) {
                if (!isDevMode()) {
                    console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
                }
                return [2 /*return*/];
            }
            // Set default ga.js uri
            $settings.uri = $settings.uri || "https://www.googletagmanager.com/gtag/js?id=" + $settings.trackingCode;
            // these commands should run first!
            initialCommands = [
                { command: 'js', values: [new Date()] },
                { command: 'config', values: [$settings.trackingCode] }
            ];
            $settings.initCommands = __spread(initialCommands, ($settings.initCommands || []));
            window['dataLayer'] = window['dataLayer'] || [];
            window['gtag'] = window['gtag'] || (/**
             * @return {?}
             */
            function () {
                window['dataLayer'].push(arguments);
            });
            try {
                for (_b = __values($settings.initCommands), _c = _b.next(); !_c.done; _c = _b.next()) {
                    command = _c.value;
                    window['gtag'].apply(window, __spread([command.command], command.values));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            s = document.createElement('script');
            s.async = true;
            s.src = $settings.uri;
            head = document.getElementsByTagName('head')[0];
            head.appendChild(s);
            return [2 /*return*/];
        });
    }); });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GoogleAnalyticsService = /** @class */ (function () {
    function GoogleAnalyticsService($trackingId) {
        this.$trackingId = $trackingId;
    }
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    GoogleAnalyticsService.prototype.throw = /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (console && console.error) {
            console.error(err);
        }
    };
    /**
     * Call native GA Tag
     *
     * @param action config|event
     * @param command Action specialization
     * @param options Command configuration
     */
    /**
     * Call native GA Tag
     *
     * @param {?} action config|event
     * @param {?} command Action specialization
     * @param {...?} options Command configuration
     * @return {?}
     */
    GoogleAnalyticsService.prototype.gtag = /**
     * Call native GA Tag
     *
     * @param {?} action config|event
     * @param {?} command Action specialization
     * @param {...?} options Command configuration
     * @return {?}
     */
    function (action, command) {
        var options = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            options[_i - 2] = arguments[_i];
        }
        try {
            window['gtag'].apply(window, __spread([action, command], options));
        }
        catch (err) {
            this.throw(err);
        }
    };
    /**
     * Send an event trigger to GA. It is the same as call:
     * ```js
     * gtag('event', 'video_auto_play_start', {
     *   'event_label': 'My promotional video',
     *   'event_category': 'video_auto_play'
     * });
     * ```
     *
     * @param action 'video_auto_play_start'
     * @param category 'video_auto_play'
     * @param label 'My promotional video'
     * @param value An value to measure something
     */
    /**
     * Send an event trigger to GA. It is the same as call:
     * ```js
     * gtag('event', 'video_auto_play_start', {
     *   'event_label': 'My promotional video',
     *   'event_category': 'video_auto_play'
     * });
     * ```
     *
     * @param {?} action 'video_auto_play_start'
     * @param {?=} category 'video_auto_play'
     * @param {?=} label 'My promotional video'
     * @param {?=} value An value to measure something
     * @param {?=} interaction
     * @return {?}
     */
    GoogleAnalyticsService.prototype.event = /**
     * Send an event trigger to GA. It is the same as call:
     * ```js
     * gtag('event', 'video_auto_play_start', {
     *   'event_label': 'My promotional video',
     *   'event_category': 'video_auto_play'
     * });
     * ```
     *
     * @param {?} action 'video_auto_play_start'
     * @param {?=} category 'video_auto_play'
     * @param {?=} label 'My promotional video'
     * @param {?=} value An value to measure something
     * @param {?=} interaction
     * @return {?}
     */
    function (action, category, label, value, interaction) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                var opt = {};
                if (category) {
                    opt['event_category'] = category;
                }
                if (label) {
                    opt['event_label'] = label;
                }
                if (value) {
                    opt['value'] = value;
                }
                if (interaction !== undefined) {
                    opt['interaction'] = interaction;
                }
                this.gtag('event', (/** @type {?} */ (action)), opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    };
    /**
     * Send an page view event. This is the same as
     *
     * ```js
     * gtag('config', 'GA_TRACKING_ID', {
     *   'page_title' : 'Homepage',
     *   'page_path': '/home'
     * });
     * ```
     *
     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
     *
     * @param path /home
     * @param title Homepage
     * @param location '{ page_location }'
     * @param options '{ ... custom dimentions }'
     */
    /**
     * Send an page view event. This is the same as
     *
     * ```js
     * gtag('config', 'GA_TRACKING_ID', {
     *   'page_title' : 'Homepage',
     *   'page_path': '/home'
     * });
     * ```
     *
     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
     *
     * @param {?=} path /home
     * @param {?=} title Homepage
     * @param {?=} location '{ page_location }'
     * @param {?=} options '{ ... custom dimentions }'
     * @return {?}
     */
    GoogleAnalyticsService.prototype.pageView = /**
     * Send an page view event. This is the same as
     *
     * ```js
     * gtag('config', 'GA_TRACKING_ID', {
     *   'page_title' : 'Homepage',
     *   'page_path': '/home'
     * });
     * ```
     *
     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
     *
     * @param {?=} path /home
     * @param {?=} title Homepage
     * @param {?=} location '{ page_location }'
     * @param {?=} options '{ ... custom dimentions }'
     * @return {?}
     */
    function (path, title, location, options) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                var opt = {};
                if (path) {
                    opt['page_path'] = path;
                }
                if (title) {
                    opt['page_title'] = title;
                }
                if (location) {
                    opt['page_location'] = location;
                }
                if (options) {
                    Object.assign(opt, options);
                }
                this.gtag('config', this.$trackingId.trackingCode, opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    };
    /**
     * Send an evento to report a App Page View. It is the same as
     *
     * ```js
     * gtag('event', 'screen_view', {
     *   'app_name': 'myAppName',
     *   'screen_name' : 'Home'
     * });
     *
     * ```
     *
     * @param screen 'screen_name'
     * @param name 'app_name'
     * @param appId 'app_id'
     * @param appVersion 'app_version'
     * @param installerId 'app_installer_id'
     */
    /**
     * Send an evento to report a App Page View. It is the same as
     *
     * ```js
     * gtag('event', 'screen_view', {
     *   'app_name': 'myAppName',
     *   'screen_name' : 'Home'
     * });
     *
     * ```
     *
     * @param {?} screen 'screen_name'
     * @param {?} appName
     * @param {?=} appId 'app_id'
     * @param {?=} appVersion 'app_version'
     * @param {?=} installerId 'app_installer_id'
     * @return {?}
     */
    GoogleAnalyticsService.prototype.appView = /**
     * Send an evento to report a App Page View. It is the same as
     *
     * ```js
     * gtag('event', 'screen_view', {
     *   'app_name': 'myAppName',
     *   'screen_name' : 'Home'
     * });
     *
     * ```
     *
     * @param {?} screen 'screen_name'
     * @param {?} appName
     * @param {?=} appId 'app_id'
     * @param {?=} appVersion 'app_version'
     * @param {?=} installerId 'app_installer_id'
     * @return {?}
     */
    function (screen, appName, appId, appVersion, installerId) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                var opt = {};
                if (screen) {
                    opt['screen_name'] = screen;
                }
                if (appName) {
                    opt['app_name'] = appName;
                }
                if (appId) {
                    opt['app_id'] = appId;
                }
                if (appVersion) {
                    opt['app_version'] = appVersion;
                }
                if (installerId) {
                    opt['app_installer_id'] = installerId;
                }
                this.gtag('event', 'screen_view', opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    };
    /**
     * Send an event to GA to report an application error. It is the same as
     *
     * ```js
     * gtag('event', 'exception', {
     *   'description': 'error_description',
     *   'fatal': false   // set to true if the error is fatal
     * });
     * ```
     *
     * @param description 'error_description'
     * @param fatal set to true if the error is fatal
     */
    /**
     * Send an event to GA to report an application error. It is the same as
     *
     * ```js
     * gtag('event', 'exception', {
     *   'description': 'error_description',
     *   'fatal': false   // set to true if the error is fatal
     * });
     * ```
     *
     * @param {?=} description 'error_description'
     * @param {?=} fatal set to true if the error is fatal
     * @return {?}
     */
    GoogleAnalyticsService.prototype.exception = /**
     * Send an event to GA to report an application error. It is the same as
     *
     * ```js
     * gtag('event', 'exception', {
     *   'description': 'error_description',
     *   'fatal': false   // set to true if the error is fatal
     * });
     * ```
     *
     * @param {?=} description 'error_description'
     * @param {?=} fatal set to true if the error is fatal
     * @return {?}
     */
    function (description, fatal) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                var opt = {};
                if (description) {
                    opt['description'] = description;
                }
                if (fatal) {
                    opt['fatal'] = fatal;
                }
                this.gtag('event', 'exception', opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    };
    GoogleAnalyticsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    GoogleAnalyticsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] }
    ]; };
    /** @nocollapse */ GoogleAnalyticsService.ngInjectableDef = ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN)); }, token: GoogleAnalyticsService, providedIn: "root" });
    return GoogleAnalyticsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {
    provide: APP_BOOTSTRAP_LISTENER,
    multi: true,
    useFactory: GoogleAnalyticsRouterInitializer,
    deps: [
        GoogleAnalyticsService,
        Router
    ]
};
/**
 * @param {?} $gaService
 * @param {?} $router
 * @return {?}
 */
function GoogleAnalyticsRouterInitializer($gaService, $router) {
    var _this = this;
    return (/**
     * @param {?} c
     * @return {?}
     */
    function (c) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            $router
                .events
                .subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof NavigationEnd) {
                    $gaService.pageView(event.urlAfterRedirects, undefined, document.location.href);
                }
            }));
            return [2 /*return*/];
        });
    }); });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GaEventCategoryDirective = /** @class */ (function () {
    function GaEventCategoryDirective() {
    }
    GaEventCategoryDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[gaEvent][gaCategory],\n             [gaCategory]",
                    exportAs: 'gaCategory'
                },] }
    ];
    /** @nocollapse */
    GaEventCategoryDirective.ctorParameters = function () { return []; };
    GaEventCategoryDirective.propDecorators = {
        gaCategory: [{ type: Input }]
    };
    return GaEventCategoryDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GaEventDirective = /** @class */ (function () {
    function GaEventDirective($gaCategoryDirective, $gaService) {
        this.$gaCategoryDirective = $gaCategoryDirective;
        this.$gaService = $gaService;
        this.gaBind = 'click';
    }
    /**
     * @return {?}
     */
    GaEventDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    GaEventDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.gaBind === 'click') {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    GaEventDirective.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (this.gaBind === 'focus') {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    GaEventDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        if (this.gaBind === 'blur') {
            this.trigger();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    GaEventDirective.prototype.trigger = /**
     * @protected
     * @return {?}
     */
    function () {
        try {
            if (!this.$gaCategoryDirective) {
                throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            }
            if (!this.gaAction) {
                throw new Error('You must provide a gaAction atrribute to identify this event.');
            }
            this.$gaService
                .event(this.gaAction, this.$gaCategoryDirective.gaCategory, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    };
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    GaEventDirective.prototype.throw = /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (console && console.warn) {
            console.warn(err);
        }
    };
    GaEventDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[gaEvent]",
                    exportAs: 'gaEvent'
                },] }
    ];
    /** @nocollapse */
    GaEventDirective.ctorParameters = function () { return [
        { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
        { type: GoogleAnalyticsService }
    ]; };
    GaEventDirective.propDecorators = {
        gaAction: [{ type: Input }],
        gaLabel: [{ type: Input }],
        label: [{ type: Input }],
        gaValue: [{ type: Input }],
        gaInteraction: [{ type: Input }],
        gaBind: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onFocus: [{ type: HostListener, args: ['focus',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
    return GaEventDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GaEventFormInputDirective = /** @class */ (function () {
    function GaEventFormInputDirective($gaEvent) {
        this.$gaEvent = $gaEvent;
    }
    /**
     * @return {?}
     */
    GaEventFormInputDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.$gaEvent) {
            this.$gaEvent.gaBind = (this.gaBind)
                ? this.$gaEvent.gaBind
                : 'focus';
        }
    };
    GaEventFormInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: "input[gaEvent],\n             select[gaEvent],\n             textarea[gaEvent]"
                },] }
    ];
    /** @nocollapse */
    GaEventFormInputDirective.ctorParameters = function () { return [
        { type: GaEventDirective, decorators: [{ type: Host }, { type: Optional }] }
    ]; };
    GaEventFormInputDirective.propDecorators = {
        gaBind: [{ type: Input }]
    };
    return GaEventFormInputDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxGoogleAnalyticsModule = /** @class */ (function () {
    function NgxGoogleAnalyticsModule() {
    }
    /**
     * @param {?} trackingCode
     * @param {?=} commands
     * @param {?=} uri
     * @return {?}
     */
    NgxGoogleAnalyticsModule.forRoot = /**
     * @param {?} trackingCode
     * @param {?=} commands
     * @param {?=} uri
     * @return {?}
     */
    function (trackingCode, commands, uri) {
        if (commands === void 0) { commands = []; }
        return {
            ngModule: NgxGoogleAnalyticsModule,
            providers: [
                {
                    provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                    useValue: {
                        trackingCode: trackingCode,
                        commands: commands,
                        uri: uri
                    }
                },
                NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
            ]
        };
    };
    NgxGoogleAnalyticsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective],
                    exports: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective]
                },] }
    ];
    return NgxGoogleAnalyticsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxGoogleAnalyticsRouterModule = /** @class */ (function () {
    function NgxGoogleAnalyticsRouterModule() {
    }
    NgxGoogleAnalyticsRouterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        NgxGoogleAnalyticsModule
                    ],
                    providers: [
                        NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER
                    ],
                    declarations: []
                },] }
    ];
    return NgxGoogleAnalyticsRouterModule;
}());

export { GaEventCategoryDirective, GaEventDirective, GaEventFormInputDirective, GoogleAnalyticsInitializer, GoogleAnalyticsRouterInitializer, GoogleAnalyticsService, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NgxGoogleAnalyticsModule, NgxGoogleAnalyticsRouterModule };
//# sourceMappingURL=ngx-google-analytics.js.map
