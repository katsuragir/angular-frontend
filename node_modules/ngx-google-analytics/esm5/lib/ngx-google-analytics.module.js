/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER } from './initializers/google-analytics.initializer';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from './tokens/ngx-google-analytics-settings-token';
import { GaEventDirective } from './directives/ga-event.directive';
import { GaEventCategoryDirective } from './directives/ga-event-category.directive';
import { GaEventFormInputDirective } from './directives/ga-event-form-input.directive';
var NgxGoogleAnalyticsModule = /** @class */ (function () {
    function NgxGoogleAnalyticsModule() {
    }
    /**
     * @param {?} trackingCode
     * @param {?=} commands
     * @param {?=} uri
     * @return {?}
     */
    NgxGoogleAnalyticsModule.forRoot = /**
     * @param {?} trackingCode
     * @param {?=} commands
     * @param {?=} uri
     * @return {?}
     */
    function (trackingCode, commands, uri) {
        if (commands === void 0) { commands = []; }
        return {
            ngModule: NgxGoogleAnalyticsModule,
            providers: [
                {
                    provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                    useValue: {
                        trackingCode: trackingCode,
                        commands: commands,
                        uri: uri
                    }
                },
                NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
            ]
        };
    };
    NgxGoogleAnalyticsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective],
                    exports: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective]
                },] }
    ];
    return NgxGoogleAnalyticsModule;
}());
export { NgxGoogleAnalyticsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdvb2dsZS1hbmFseXRpY3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWdvb2dsZS1hbmFseXRpY3MvIiwic291cmNlcyI6WyJsaWIvbmd4LWdvb2dsZS1hbmFseXRpY3MubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUseUNBQXlDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUN4RyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNwRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUV2RjtJQUFBO0lBdUJBLENBQUM7Ozs7Ozs7SUFoQlEsZ0NBQU87Ozs7OztJQUFkLFVBQWUsWUFBb0IsRUFBRSxRQUF3QyxFQUFFLEdBQVk7UUFBdEQseUJBQUEsRUFBQSxhQUF3QztRQUMzRSxPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLG1DQUFtQztvQkFDNUMsUUFBUSxFQUFFO3dCQUNSLFlBQVksRUFBRSxZQUFZO3dCQUMxQixRQUFRLEVBQUUsUUFBUTt3QkFDbEIsR0FBRyxFQUFFLEdBQUc7cUJBQ1Q7aUJBQ0Y7Z0JBQ0QseUNBQXlDO2FBQzFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXRCRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLEVBQ1I7b0JBQ0QsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLENBQUM7b0JBQ3JGLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLHdCQUF3QixFQUFFLHlCQUF5QixDQUFDO2lCQUNqRjs7SUFrQkQsK0JBQUM7Q0FBQSxBQXZCRCxJQXVCQztTQWpCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZCB9IGZyb20gJy4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3MtY29tbWFudCc7XHJcbmltcG9ydCB7IE5HWF9HT09HTEVfQU5BTFlUSUNTX0lOSVRJQUxJWkVSX1BST1ZJREVSIH0gZnJvbSAnLi9pbml0aWFsaXplcnMvZ29vZ2xlLWFuYWx5dGljcy5pbml0aWFsaXplcic7XHJcbmltcG9ydCB7IE5HWF9HT09HTEVfQU5BTFlUSUNTX1NFVFRJTkdTX1RPS0VOIH0gZnJvbSAnLi90b2tlbnMvbmd4LWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MtdG9rZW4nO1xyXG5pbXBvcnQgeyBHYUV2ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2dhLWV2ZW50LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEdhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9nYS1ldmVudC1jYXRlZ29yeS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBHYUV2ZW50Rm9ybUlucHV0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2dhLWV2ZW50LWZvcm0taW5wdXQuZGlyZWN0aXZlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbR2FFdmVudERpcmVjdGl2ZSwgR2FFdmVudENhdGVnb3J5RGlyZWN0aXZlLCBHYUV2ZW50Rm9ybUlucHV0RGlyZWN0aXZlXSxcclxuICBleHBvcnRzOiBbR2FFdmVudERpcmVjdGl2ZSwgR2FFdmVudENhdGVnb3J5RGlyZWN0aXZlLCBHYUV2ZW50Rm9ybUlucHV0RGlyZWN0aXZlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4R29vZ2xlQW5hbHl0aWNzTW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdCh0cmFja2luZ0NvZGU6IHN0cmluZywgY29tbWFuZHM6IElHb29nbGVBbmFseXRpY3NDb21tYW5kW10gPSBbXSwgdXJpPzogc3RyaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogTmd4R29vZ2xlQW5hbHl0aWNzTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTixcclxuICAgICAgICAgIHVzZVZhbHVlOiB7XHJcbiAgICAgICAgICAgIHRyYWNraW5nQ29kZTogdHJhY2tpbmdDb2RlLFxyXG4gICAgICAgICAgICBjb21tYW5kczogY29tbWFuZHMsXHJcbiAgICAgICAgICAgIHVyaTogdXJpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBOR1hfR09PR0xFX0FOQUxZVElDU19JTklUSUFMSVpFUl9QUk9WSURFUixcclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19