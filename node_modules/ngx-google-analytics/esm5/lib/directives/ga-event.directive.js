/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Optional, Input, HostListener } from '@angular/core';
import { GaEventCategoryDirective } from './ga-event-category.directive';
import { GoogleAnalyticsService } from '../services/google-analytics.service';
var GaEventDirective = /** @class */ (function () {
    function GaEventDirective($gaCategoryDirective, $gaService) {
        this.$gaCategoryDirective = $gaCategoryDirective;
        this.$gaService = $gaService;
        this.gaBind = 'click';
    }
    /**
     * @return {?}
     */
    GaEventDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    GaEventDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.gaBind === 'click') {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    GaEventDirective.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (this.gaBind === 'focus') {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    GaEventDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        if (this.gaBind === 'blur') {
            this.trigger();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    GaEventDirective.prototype.trigger = /**
     * @protected
     * @return {?}
     */
    function () {
        try {
            if (!this.$gaCategoryDirective) {
                throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            }
            if (!this.gaAction) {
                throw new Error('You must provide a gaAction atrribute to identify this event.');
            }
            this.$gaService
                .event(this.gaAction, this.$gaCategoryDirective.gaCategory, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    };
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    GaEventDirective.prototype.throw = /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (console && console.warn) {
            console.warn(err);
        }
    };
    GaEventDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[gaEvent]",
                    exportAs: 'gaEvent'
                },] }
    ];
    /** @nocollapse */
    GaEventDirective.ctorParameters = function () { return [
        { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
        { type: GoogleAnalyticsService }
    ]; };
    GaEventDirective.propDecorators = {
        gaAction: [{ type: Input }],
        gaLabel: [{ type: Input }],
        label: [{ type: Input }],
        gaValue: [{ type: Input }],
        gaInteraction: [{ type: Input }],
        gaBind: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onFocus: [{ type: HostListener, args: ['focus',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
    return GaEventDirective;
}());
export { GaEventDirective };
if (false) {
    /** @type {?} */
    GaEventDirective.prototype.gaAction;
    /** @type {?} */
    GaEventDirective.prototype.gaLabel;
    /** @type {?} */
    GaEventDirective.prototype.label;
    /** @type {?} */
    GaEventDirective.prototype.gaValue;
    /** @type {?} */
    GaEventDirective.prototype.gaInteraction;
    /** @type {?} */
    GaEventDirective.prototype.gaBind;
    /**
     * @type {?}
     * @protected
     */
    GaEventDirective.prototype.$gaCategoryDirective;
    /**
     * @type {?}
     * @protected
     */
    GaEventDirective.prototype.$gaService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2EtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWdvb2dsZS1hbmFseXRpY3MvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9nYS1ldmVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFJOUU7SUFNRSwwQkFDd0Isb0JBQThDLEVBQzFELFVBQWtDO1FBRHRCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBMEI7UUFDMUQsZUFBVSxHQUFWLFVBQVUsQ0FBd0I7UUFTckMsV0FBTSxHQUFXLE9BQU8sQ0FBQztJQVBsQyxDQUFDOzs7O0lBU0QsbUNBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7OztJQUdELGtDQUFPOzs7SUFEUDtRQUVFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQzs7OztJQUdELGtDQUFPOzs7SUFEUDtRQUVFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQzs7OztJQUdELGlDQUFNOzs7SUFETjtRQUVFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQzs7Ozs7SUFFUyxrQ0FBTzs7OztJQUFqQjtRQUNFLElBQUk7WUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDLENBQUM7YUFDbEY7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2FBQ2xGO1lBRUQsSUFBSSxDQUFDLFVBQVU7aUJBQ1YsS0FBSyxDQUNKLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFDcEMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUMxQixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7U0FDUDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7OztJQUVTLGdDQUFLOzs7OztJQUFmLFVBQWdCLEdBQVU7UUFDeEIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7Z0JBdEVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLFNBQVM7aUJBQ3BCOzs7O2dCQVJRLHdCQUF3Qix1QkFZNUIsUUFBUTtnQkFYSixzQkFBc0I7OzsyQkFnQjVCLEtBQUs7MEJBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7Z0NBQ0wsS0FBSzt5QkFDTCxLQUFLOzBCQUtMLFlBQVksU0FBQyxPQUFPOzBCQU9wQixZQUFZLFNBQUMsT0FBTzt5QkFPcEIsWUFBWSxTQUFDLE1BQU07O0lBb0N0Qix1QkFBQztDQUFBLEFBeEVELElBd0VDO1NBcEVZLGdCQUFnQjs7O0lBUTNCLG9DQUFxQzs7SUFDckMsbUNBQXlCOztJQUN6QixpQ0FBdUI7O0lBQ3ZCLG1DQUF5Qjs7SUFDekIseUNBQWdDOztJQUNoQyxrQ0FBa0M7Ozs7O0lBVmhDLGdEQUFvRTs7Ozs7SUFDcEUsc0NBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPcHRpb25hbCwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZSB9IGZyb20gJy4vZ2EtZXZlbnQtY2F0ZWdvcnkuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgR29vZ2xlQW5hbHl0aWNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2dvb2dsZS1hbmFseXRpY3Muc2VydmljZSc7XHJcbmltcG9ydCB7IEdhQmluZCB9IGZyb20gJy4uL3R5cGVzL2dhLWJpbmQudHlwZSc7XHJcbmltcG9ydCB7IEdhQWN0aW9uIH0gZnJvbSAnLi4vdHlwZXMvZ2EtYWN0aW9uLnR5cGUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6IGBbZ2FFdmVudF1gLFxyXG4gIGV4cG9ydEFzOiAnZ2FFdmVudCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhRXZlbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCAkZ2FDYXRlZ29yeURpcmVjdGl2ZTogR2FFdmVudENhdGVnb3J5RGlyZWN0aXZlLFxyXG4gICAgcHJvdGVjdGVkICRnYVNlcnZpY2U6IEdvb2dsZUFuYWx5dGljc1NlcnZpY2VcclxuICApIHtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpIGdhQWN0aW9uOiBHYUFjdGlvbiB8IHN0cmluZztcclxuICBASW5wdXQoKSBnYUxhYmVsOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcclxuICBASW5wdXQoKSBnYVZhbHVlOiBudW1iZXI7XHJcbiAgQElucHV0KCkgZ2FJbnRlcmFjdGlvbjogYm9vbGVhbjtcclxuICBASW5wdXQoKSBnYUJpbmQ6IEdhQmluZCA9ICdjbGljayc7XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gIG9uQ2xpY2soKSB7XHJcbiAgICBpZiAodGhpcy5nYUJpbmQgPT09ICdjbGljaycpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdmb2N1cycpXHJcbiAgb25Gb2N1cygpIHtcclxuICAgIGlmICh0aGlzLmdhQmluZCA9PT0gJ2ZvY3VzJykge1xyXG4gICAgICB0aGlzLnRyaWdnZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxyXG4gIG9uQmx1cigpIHtcclxuICAgIGlmICh0aGlzLmdhQmluZCA9PT0gJ2JsdXInKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHRyaWdnZXIoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoIXRoaXMuJGdhQ2F0ZWdvcnlEaXJlY3RpdmUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHByb3ZpZGUgYSBnYUNhdGVnb3J5IGF0dHJpYnV0ZSB3LyBnYUV2ZW50IERpcmVjdGl2ZS4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF0aGlzLmdhQWN0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgZ2FBY3Rpb24gYXRycmlidXRlIHRvIGlkZW50aWZ5IHRoaXMgZXZlbnQuJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuJGdhU2VydmljZVxyXG4gICAgICAgICAgLmV2ZW50KFxyXG4gICAgICAgICAgICB0aGlzLmdhQWN0aW9uLFxyXG4gICAgICAgICAgICB0aGlzLiRnYUNhdGVnb3J5RGlyZWN0aXZlLmdhQ2F0ZWdvcnksXHJcbiAgICAgICAgICAgIHRoaXMuZ2FMYWJlbCB8fCB0aGlzLmxhYmVsLFxyXG4gICAgICAgICAgICB0aGlzLmdhVmFsdWUsXHJcbiAgICAgICAgICAgIHRoaXMuZ2FJbnRlcmFjdGlvblxyXG4gICAgICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICB0aGlzLnRocm93KGVycik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgdGhyb3coZXJyOiBFcnJvcikge1xyXG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihlcnIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19