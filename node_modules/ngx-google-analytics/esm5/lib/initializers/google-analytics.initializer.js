/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { APP_INITIALIZER, isDevMode } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
/** @type {?} */
export var NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
    ]
};
/**
 * @param {?} $settings
 * @return {?}
 */
export function GoogleAnalyticsInitializer($settings) {
    var _this = this;
    return (/**
     * @return {?}
     */
    function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var e_1, _a, initialCommands, _b, _c, command, s, head;
        return tslib_1.__generator(this, function (_d) {
            if (!$settings.trackingCode) {
                if (!isDevMode()) {
                    console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
                }
                return [2 /*return*/];
            }
            // Set default ga.js uri
            $settings.uri = $settings.uri || "https://www.googletagmanager.com/gtag/js?id=" + $settings.trackingCode;
            // these commands should run first!
            initialCommands = [
                { command: 'js', values: [new Date()] },
                { command: 'config', values: [$settings.trackingCode] }
            ];
            $settings.initCommands = tslib_1.__spread(initialCommands, ($settings.initCommands || []));
            window['dataLayer'] = window['dataLayer'] || [];
            window['gtag'] = window['gtag'] || (/**
             * @return {?}
             */
            function () {
                window['dataLayer'].push(arguments);
            });
            try {
                for (_b = tslib_1.__values($settings.initCommands), _c = _b.next(); !_c.done; _c = _b.next()) {
                    command = _c.value;
                    window['gtag'].apply(window, tslib_1.__spread([command.command], command.values));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            s = document.createElement('script');
            s.async = true;
            s.src = $settings.uri;
            head = document.getElementsByTagName('head')[0];
            head.appendChild(s);
            return [2 /*return*/];
        });
    }); });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy5pbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1nb29nbGUtYW5hbHl0aWNzLyIsInNvdXJjZXMiOlsibGliL2luaXRpYWxpemVycy9nb29nbGUtYW5hbHl0aWNzLmluaXRpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFZLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7O0FBSXBHLE1BQU0sS0FBTyx5Q0FBeUMsR0FBYTtJQUNqRSxPQUFPLEVBQUUsZUFBZTtJQUN4QixLQUFLLEVBQUUsSUFBSTtJQUNYLFVBQVUsRUFBRSwwQkFBMEI7SUFDdEMsSUFBSSxFQUFFO1FBQ0osbUNBQW1DO0tBQ3BDO0NBQ0Y7Ozs7O0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxTQUFtQztJQURyQyxpQkF1Q0M7SUFwQ0M7OztJQUFPOzs7WUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRTtnQkFDM0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO29CQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGdIQUFnSCxDQUFDLENBQUM7aUJBQ2pJO2dCQUVELHNCQUFPO2FBQ1I7WUFFRCx3QkFBd0I7WUFDeEIsU0FBUyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLGlEQUErQyxTQUFTLENBQUMsWUFBYyxDQUFDOztZQUduRyxlQUFlLEdBQW1DO2dCQUN0RCxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBRSxFQUFFO2dCQUN6QyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUUsU0FBUyxDQUFDLFlBQVksQ0FBRSxFQUFFO2FBQzFEO1lBRUQsU0FBUyxDQUFDLFlBQVksb0JBQVEsZUFBZSxFQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBRSxDQUFDO1lBRW5GLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDOzs7WUFBSTtnQkFDakMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QyxDQUFDLENBQUEsQ0FBQzs7Z0JBRUYsS0FBc0IsS0FBQSxpQkFBQSxTQUFTLENBQUMsWUFBWSxDQUFBLDRDQUFFO29CQUFuQyxPQUFPO29CQUNoQixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQWQsTUFBTSxvQkFBUyxPQUFPLENBQUMsT0FBTyxHQUFLLE9BQU8sQ0FBQyxNQUFNLEdBQUU7aUJBQ3BEOzs7Ozs7Ozs7WUFFSyxDQUFDLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQzdELENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2YsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBRWhCLElBQUksR0FBb0IsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7U0FDckIsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciwgQVBQX0lOSVRJQUxJWkVSLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4gfSBmcm9tICcuLi90b2tlbnMvbmd4LWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MtdG9rZW4nO1xyXG5pbXBvcnQgeyBJR29vZ2xlQW5hbHl0aWNzU2V0dGluZ3MgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncyc7XHJcbmltcG9ydCB7IElHb29nbGVBbmFseXRpY3NDb21tYW5kIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3MtY29tbWFudCc7XHJcblxyXG5leHBvcnQgY29uc3QgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfSU5JVElBTElaRVJfUFJPVklERVI6IFByb3ZpZGVyID0ge1xyXG4gIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcclxuICBtdWx0aTogdHJ1ZSxcclxuICB1c2VGYWN0b3J5OiBHb29nbGVBbmFseXRpY3NJbml0aWFsaXplcixcclxuICBkZXBzOiBbXHJcbiAgICBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTlxyXG4gIF1cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHb29nbGVBbmFseXRpY3NJbml0aWFsaXplcihcclxuICAkc2V0dGluZ3M6IElHb29nbGVBbmFseXRpY3NTZXR0aW5nc1xyXG4pIHtcclxuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKCEkc2V0dGluZ3MudHJhY2tpbmdDb2RlKSB7XHJcbiAgICAgIGlmICghaXNEZXZNb2RlKCkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFbXB0eSB0cmFja2luZyBjb2RlIGZvciBHb29nbGUgQW5hbHl0aWNzLiBNYWtlIHN1cmUgdG8gcHJvdmlkZSBvbmUgd2hlbiBpbml0aWFsaXppbmcgTmd4R29vZ2xlQW5hbHl0aWNzTW9kdWxlLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IGRlZmF1bHQgZ2EuanMgdXJpXHJcbiAgICAkc2V0dGluZ3MudXJpID0gJHNldHRpbmdzLnVyaSB8fCBgaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD0keyRzZXR0aW5ncy50cmFja2luZ0NvZGV9YDtcclxuXHJcbiAgICAvLyB0aGVzZSBjb21tYW5kcyBzaG91bGQgcnVuIGZpcnN0IVxyXG4gICAgY29uc3QgaW5pdGlhbENvbW1hbmRzOiBBcnJheTxJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZD4gPSBbXHJcbiAgICAgIHsgY29tbWFuZDogJ2pzJywgdmFsdWVzOiBbIG5ldyBEYXRlKCkgXSB9LFxyXG4gICAgICB7IGNvbW1hbmQ6ICdjb25maWcnLCB2YWx1ZXM6IFsgJHNldHRpbmdzLnRyYWNraW5nQ29kZSBdIH1cclxuICAgIF07XHJcblxyXG4gICAgJHNldHRpbmdzLmluaXRDb21tYW5kcyA9IFsgLi4uaW5pdGlhbENvbW1hbmRzLCAuLi4oJHNldHRpbmdzLmluaXRDb21tYW5kcyB8fCBbXSkgXTtcclxuXHJcbiAgICB3aW5kb3dbJ2RhdGFMYXllciddID0gd2luZG93WydkYXRhTGF5ZXInXSB8fCBbXTtcclxuICAgIHdpbmRvd1snZ3RhZyddID0gd2luZG93WydndGFnJ10gfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB3aW5kb3dbJ2RhdGFMYXllciddLnB1c2goYXJndW1lbnRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZm9yIChjb25zdCBjb21tYW5kIG9mICRzZXR0aW5ncy5pbml0Q29tbWFuZHMpIHtcclxuICAgICAgd2luZG93WydndGFnJ10oY29tbWFuZC5jb21tYW5kLCAuLi5jb21tYW5kLnZhbHVlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgczogSFRNTFNjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgIHMuYXN5bmMgPSB0cnVlO1xyXG4gICAgcy5zcmMgPSAkc2V0dGluZ3MudXJpO1xyXG5cclxuICAgIGNvbnN0IGhlYWQ6IEhUTUxIZWFkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICBoZWFkLmFwcGVuZENoaWxkKHMpO1xyXG4gIH07XHJcbn1cclxuIl19