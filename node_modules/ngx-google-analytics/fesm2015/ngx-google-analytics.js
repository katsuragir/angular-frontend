import { __awaiter } from 'tslib';
import { InjectionToken, APP_INITIALIZER, isDevMode, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, APP_BOOTSTRAP_LISTENER, Directive, Input, Optional, HostListener, Host, NgModule } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new InjectionToken('ngx-hotjar-settings', {
    factory: (/**
     * @return {?}
     */
    () => ({ trackingCode: '' }))
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
    ]
};
/**
 * @param {?} $settings
 * @return {?}
 */
function GoogleAnalyticsInitializer($settings) {
    return (/**
     * @return {?}
     */
    () => __awaiter(this, void 0, void 0, function* () {
        if (!$settings.trackingCode) {
            if (!isDevMode()) {
                console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
            }
            return;
        }
        // Set default ga.js uri
        $settings.uri = $settings.uri || `https://www.googletagmanager.com/gtag/js?id=${$settings.trackingCode}`;
        // these commands should run first!
        /** @type {?} */
        const initialCommands = [
            { command: 'js', values: [new Date()] },
            { command: 'config', values: [$settings.trackingCode] }
        ];
        $settings.initCommands = [...initialCommands, ...($settings.initCommands || [])];
        window['dataLayer'] = window['dataLayer'] || [];
        window['gtag'] = window['gtag'] || (/**
         * @return {?}
         */
        function () {
            window['dataLayer'].push(arguments);
        });
        for (const command of $settings.initCommands) {
            window['gtag'](command.command, ...command.values);
        }
        /** @type {?} */
        const s = document.createElement('script');
        s.async = true;
        s.src = $settings.uri;
        /** @type {?} */
        const head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleAnalyticsService {
    /**
     * @param {?} $trackingId
     */
    constructor($trackingId) {
        this.$trackingId = $trackingId;
    }
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    throw(err) {
        if (console && console.error) {
            console.error(err);
        }
    }
    /**
     * Call native GA Tag
     *
     * @param {?} action config|event
     * @param {?} command Action specialization
     * @param {...?} options Command configuration
     * @return {?}
     */
    gtag(action, command, ...options) {
        try {
            window['gtag'](action, command, ...options);
        }
        catch (err) {
            this.throw(err);
        }
    }
    /**
     * Send an event trigger to GA. It is the same as call:
     * ```js
     * gtag('event', 'video_auto_play_start', {
     *   'event_label': 'My promotional video',
     *   'event_category': 'video_auto_play'
     * });
     * ```
     *
     * @param {?} action 'video_auto_play_start'
     * @param {?=} category 'video_auto_play'
     * @param {?=} label 'My promotional video'
     * @param {?=} value An value to measure something
     * @param {?=} interaction
     * @return {?}
     */
    event(action, category, label, value, interaction) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (category) {
                    opt['event_category'] = category;
                }
                if (label) {
                    opt['event_label'] = label;
                }
                if (value) {
                    opt['value'] = value;
                }
                if (interaction !== undefined) {
                    opt['interaction'] = interaction;
                }
                this.gtag('event', (/** @type {?} */ (action)), opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an page view event. This is the same as
     *
     * ```js
     * gtag('config', 'GA_TRACKING_ID', {
     *   'page_title' : 'Homepage',
     *   'page_path': '/home'
     * });
     * ```
     *
     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
     *
     * @param {?=} path /home
     * @param {?=} title Homepage
     * @param {?=} location '{ page_location }'
     * @param {?=} options '{ ... custom dimentions }'
     * @return {?}
     */
    pageView(path, title, location, options) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (path) {
                    opt['page_path'] = path;
                }
                if (title) {
                    opt['page_title'] = title;
                }
                if (location) {
                    opt['page_location'] = location;
                }
                if (options) {
                    Object.assign(opt, options);
                }
                this.gtag('config', this.$trackingId.trackingCode, opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an evento to report a App Page View. It is the same as
     *
     * ```js
     * gtag('event', 'screen_view', {
     *   'app_name': 'myAppName',
     *   'screen_name' : 'Home'
     * });
     *
     * ```
     *
     * @param {?} screen 'screen_name'
     * @param {?} appName
     * @param {?=} appId 'app_id'
     * @param {?=} appVersion 'app_version'
     * @param {?=} installerId 'app_installer_id'
     * @return {?}
     */
    appView(screen, appName, appId, appVersion, installerId) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (screen) {
                    opt['screen_name'] = screen;
                }
                if (appName) {
                    opt['app_name'] = appName;
                }
                if (appId) {
                    opt['app_id'] = appId;
                }
                if (appVersion) {
                    opt['app_version'] = appVersion;
                }
                if (installerId) {
                    opt['app_installer_id'] = installerId;
                }
                this.gtag('event', 'screen_view', opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an event to GA to report an application error. It is the same as
     *
     * ```js
     * gtag('event', 'exception', {
     *   'description': 'error_description',
     *   'fatal': false   // set to true if the error is fatal
     * });
     * ```
     *
     * @param {?=} description 'error_description'
     * @param {?=} fatal set to true if the error is fatal
     * @return {?}
     */
    exception(description, fatal) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (description) {
                    opt['description'] = description;
                }
                if (fatal) {
                    opt['fatal'] = fatal;
                }
                this.gtag('event', 'exception', opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
}
GoogleAnalyticsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GoogleAnalyticsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] }
];
/** @nocollapse */ GoogleAnalyticsService.ngInjectableDef = ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN)); }, token: GoogleAnalyticsService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {
    provide: APP_BOOTSTRAP_LISTENER,
    multi: true,
    useFactory: GoogleAnalyticsRouterInitializer,
    deps: [
        GoogleAnalyticsService,
        Router
    ]
};
/**
 * @param {?} $gaService
 * @param {?} $router
 * @return {?}
 */
function GoogleAnalyticsRouterInitializer($gaService, $router) {
    return (/**
     * @param {?} c
     * @return {?}
     */
    (c) => __awaiter(this, void 0, void 0, function* () {
        $router
            .events
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationEnd) {
                $gaService.pageView(event.urlAfterRedirects, undefined, document.location.href);
            }
        }));
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GaEventCategoryDirective {
    constructor() { }
}
GaEventCategoryDirective.decorators = [
    { type: Directive, args: [{
                selector: `[gaEvent][gaCategory],
             [gaCategory]`,
                exportAs: 'gaCategory'
            },] }
];
/** @nocollapse */
GaEventCategoryDirective.ctorParameters = () => [];
GaEventCategoryDirective.propDecorators = {
    gaCategory: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GaEventDirective {
    /**
     * @param {?} $gaCategoryDirective
     * @param {?} $gaService
     */
    constructor($gaCategoryDirective, $gaService) {
        this.$gaCategoryDirective = $gaCategoryDirective;
        this.$gaService = $gaService;
        this.gaBind = 'click';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.gaBind === 'click') {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (this.gaBind === 'focus') {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.gaBind === 'blur') {
            this.trigger();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    trigger() {
        try {
            if (!this.$gaCategoryDirective) {
                throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            }
            if (!this.gaAction) {
                throw new Error('You must provide a gaAction atrribute to identify this event.');
            }
            this.$gaService
                .event(this.gaAction, this.$gaCategoryDirective.gaCategory, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    }
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    throw(err) {
        if (console && console.warn) {
            console.warn(err);
        }
    }
}
GaEventDirective.decorators = [
    { type: Directive, args: [{
                selector: `[gaEvent]`,
                exportAs: 'gaEvent'
            },] }
];
/** @nocollapse */
GaEventDirective.ctorParameters = () => [
    { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
    { type: GoogleAnalyticsService }
];
GaEventDirective.propDecorators = {
    gaAction: [{ type: Input }],
    gaLabel: [{ type: Input }],
    label: [{ type: Input }],
    gaValue: [{ type: Input }],
    gaInteraction: [{ type: Input }],
    gaBind: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GaEventFormInputDirective {
    /**
     * @param {?} $gaEvent
     */
    constructor($gaEvent) {
        this.$gaEvent = $gaEvent;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.$gaEvent) {
            this.$gaEvent.gaBind = (this.gaBind)
                ? this.$gaEvent.gaBind
                : 'focus';
        }
    }
}
GaEventFormInputDirective.decorators = [
    { type: Directive, args: [{
                selector: `input[gaEvent],
             select[gaEvent],
             textarea[gaEvent]`
            },] }
];
/** @nocollapse */
GaEventFormInputDirective.ctorParameters = () => [
    { type: GaEventDirective, decorators: [{ type: Host }, { type: Optional }] }
];
GaEventFormInputDirective.propDecorators = {
    gaBind: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxGoogleAnalyticsModule {
    /**
     * @param {?} trackingCode
     * @param {?=} commands
     * @param {?=} uri
     * @return {?}
     */
    static forRoot(trackingCode, commands = [], uri) {
        return {
            ngModule: NgxGoogleAnalyticsModule,
            providers: [
                {
                    provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                    useValue: {
                        trackingCode: trackingCode,
                        commands: commands,
                        uri: uri
                    }
                },
                NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
            ]
        };
    }
}
NgxGoogleAnalyticsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective],
                exports: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxGoogleAnalyticsRouterModule {
}
NgxGoogleAnalyticsRouterModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    NgxGoogleAnalyticsModule
                ],
                providers: [
                    NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER
                ],
                declarations: []
            },] }
];

export { GaEventCategoryDirective, GaEventDirective, GaEventFormInputDirective, GoogleAnalyticsInitializer, GoogleAnalyticsRouterInitializer, GoogleAnalyticsService, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NgxGoogleAnalyticsModule, NgxGoogleAnalyticsRouterModule };
//# sourceMappingURL=ngx-google-analytics.js.map
