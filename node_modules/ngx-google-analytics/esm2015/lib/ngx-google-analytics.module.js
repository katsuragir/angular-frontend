/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER } from './initializers/google-analytics.initializer';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from './tokens/ngx-google-analytics-settings-token';
import { GaEventDirective } from './directives/ga-event.directive';
import { GaEventCategoryDirective } from './directives/ga-event-category.directive';
import { GaEventFormInputDirective } from './directives/ga-event-form-input.directive';
export class NgxGoogleAnalyticsModule {
    /**
     * @param {?} trackingCode
     * @param {?=} commands
     * @param {?=} uri
     * @return {?}
     */
    static forRoot(trackingCode, commands = [], uri) {
        return {
            ngModule: NgxGoogleAnalyticsModule,
            providers: [
                {
                    provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                    useValue: {
                        trackingCode: trackingCode,
                        commands: commands,
                        uri: uri
                    }
                },
                NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
            ]
        };
    }
}
NgxGoogleAnalyticsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective],
                exports: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdvb2dsZS1hbmFseXRpY3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWdvb2dsZS1hbmFseXRpY3MvIiwic291cmNlcyI6WyJsaWIvbmd4LWdvb2dsZS1hbmFseXRpY3MubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUseUNBQXlDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUN4RyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNwRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQVF2RixNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7O0lBQ25DLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBb0IsRUFBRSxXQUFzQyxFQUFFLEVBQUUsR0FBWTtRQUN6RixPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLG1DQUFtQztvQkFDNUMsUUFBUSxFQUFFO3dCQUNSLFlBQVksRUFBRSxZQUFZO3dCQUMxQixRQUFRLEVBQUUsUUFBUTt3QkFDbEIsR0FBRyxFQUFFLEdBQUc7cUJBQ1Q7aUJBQ0Y7Z0JBQ0QseUNBQXlDO2FBQzFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXRCRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLEVBQ1I7Z0JBQ0QsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLENBQUM7Z0JBQ3JGLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLHdCQUF3QixFQUFFLHlCQUF5QixDQUFDO2FBQ2pGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSUdvb2dsZUFuYWx5dGljc0NvbW1hbmQgfSBmcm9tICcuL2ludGVyZmFjZXMvaS1nb29nbGUtYW5hbHl0aWNzLWNvbW1hbnQnO1xyXG5pbXBvcnQgeyBOR1hfR09PR0xFX0FOQUxZVElDU19JTklUSUFMSVpFUl9QUk9WSURFUiB9IGZyb20gJy4vaW5pdGlhbGl6ZXJzL2dvb2dsZS1hbmFseXRpY3MuaW5pdGlhbGl6ZXInO1xyXG5pbXBvcnQgeyBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTiB9IGZyb20gJy4vdG9rZW5zL25neC1nb29nbGUtYW5hbHl0aWNzLXNldHRpbmdzLXRva2VuJztcclxuaW1wb3J0IHsgR2FFdmVudERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9nYS1ldmVudC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBHYUV2ZW50Q2F0ZWdvcnlEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvZ2EtZXZlbnQtY2F0ZWdvcnkuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgR2FFdmVudEZvcm1JbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9nYS1ldmVudC1mb3JtLWlucHV0LmRpcmVjdGl2ZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW0dhRXZlbnREaXJlY3RpdmUsIEdhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZSwgR2FFdmVudEZvcm1JbnB1dERpcmVjdGl2ZV0sXHJcbiAgZXhwb3J0czogW0dhRXZlbnREaXJlY3RpdmUsIEdhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZSwgR2FFdmVudEZvcm1JbnB1dERpcmVjdGl2ZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEdvb2dsZUFuYWx5dGljc01vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QodHJhY2tpbmdDb2RlOiBzdHJpbmcsIGNvbW1hbmRzOiBJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZFtdID0gW10sIHVyaT86IHN0cmluZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5neEdvb2dsZUFuYWx5dGljc01vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4sXHJcbiAgICAgICAgICB1c2VWYWx1ZToge1xyXG4gICAgICAgICAgICB0cmFja2luZ0NvZGU6IHRyYWNraW5nQ29kZSxcclxuICAgICAgICAgICAgY29tbWFuZHM6IGNvbW1hbmRzLFxyXG4gICAgICAgICAgICB1cmk6IHVyaVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfSU5JVElBTElaRVJfUFJPVklERVIsXHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==