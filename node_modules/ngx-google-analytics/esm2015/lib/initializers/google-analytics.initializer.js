/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { APP_INITIALIZER, isDevMode } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
/** @type {?} */
export const NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
    ]
};
/**
 * @param {?} $settings
 * @return {?}
 */
export function GoogleAnalyticsInitializer($settings) {
    return (/**
     * @return {?}
     */
    () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!$settings.trackingCode) {
            if (!isDevMode()) {
                console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
            }
            return;
        }
        // Set default ga.js uri
        $settings.uri = $settings.uri || `https://www.googletagmanager.com/gtag/js?id=${$settings.trackingCode}`;
        // these commands should run first!
        /** @type {?} */
        const initialCommands = [
            { command: 'js', values: [new Date()] },
            { command: 'config', values: [$settings.trackingCode] }
        ];
        $settings.initCommands = [...initialCommands, ...($settings.initCommands || [])];
        window['dataLayer'] = window['dataLayer'] || [];
        window['gtag'] = window['gtag'] || (/**
         * @return {?}
         */
        function () {
            window['dataLayer'].push(arguments);
        });
        for (const command of $settings.initCommands) {
            window['gtag'](command.command, ...command.values);
        }
        /** @type {?} */
        const s = document.createElement('script');
        s.async = true;
        s.src = $settings.uri;
        /** @type {?} */
        const head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy5pbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1nb29nbGUtYW5hbHl0aWNzLyIsInNvdXJjZXMiOlsibGliL2luaXRpYWxpemVycy9nb29nbGUtYW5hbHl0aWNzLmluaXRpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFZLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7O0FBSXBHLE1BQU0sT0FBTyx5Q0FBeUMsR0FBYTtJQUNqRSxPQUFPLEVBQUUsZUFBZTtJQUN4QixLQUFLLEVBQUUsSUFBSTtJQUNYLFVBQVUsRUFBRSwwQkFBMEI7SUFDdEMsSUFBSSxFQUFFO1FBQ0osbUNBQW1DO0tBQ3BDO0NBQ0Y7Ozs7O0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxTQUFtQztJQUVuQzs7O0lBQU8sR0FBUyxFQUFFO1FBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1lBQzNCLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnSEFBZ0gsQ0FBQyxDQUFDO2FBQ2pJO1lBRUQsT0FBTztTQUNSO1FBRUQsd0JBQXdCO1FBQ3hCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsSUFBSSwrQ0FBK0MsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDOzs7Y0FHbkcsZUFBZSxHQUFtQztZQUN0RCxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBRSxFQUFFO1lBQ3pDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBRSxTQUFTLENBQUMsWUFBWSxDQUFFLEVBQUU7U0FDMUQ7UUFFRCxTQUFTLENBQUMsWUFBWSxHQUFHLENBQUUsR0FBRyxlQUFlLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDLENBQUUsQ0FBQztRQUVuRixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7O1FBQUk7WUFDakMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUEsQ0FBQztRQUVGLEtBQUssTUFBTSxPQUFPLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRTtZQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRDs7Y0FFSyxDQUFDLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQzdELENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDOztjQUVoQixJQUFJLEdBQW9CLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUEsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciwgQVBQX0lOSVRJQUxJWkVSLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4gfSBmcm9tICcuLi90b2tlbnMvbmd4LWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MtdG9rZW4nO1xyXG5pbXBvcnQgeyBJR29vZ2xlQW5hbHl0aWNzU2V0dGluZ3MgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncyc7XHJcbmltcG9ydCB7IElHb29nbGVBbmFseXRpY3NDb21tYW5kIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3MtY29tbWFudCc7XHJcblxyXG5leHBvcnQgY29uc3QgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfSU5JVElBTElaRVJfUFJPVklERVI6IFByb3ZpZGVyID0ge1xyXG4gIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcclxuICBtdWx0aTogdHJ1ZSxcclxuICB1c2VGYWN0b3J5OiBHb29nbGVBbmFseXRpY3NJbml0aWFsaXplcixcclxuICBkZXBzOiBbXHJcbiAgICBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTlxyXG4gIF1cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHb29nbGVBbmFseXRpY3NJbml0aWFsaXplcihcclxuICAkc2V0dGluZ3M6IElHb29nbGVBbmFseXRpY3NTZXR0aW5nc1xyXG4pIHtcclxuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKCEkc2V0dGluZ3MudHJhY2tpbmdDb2RlKSB7XHJcbiAgICAgIGlmICghaXNEZXZNb2RlKCkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFbXB0eSB0cmFja2luZyBjb2RlIGZvciBHb29nbGUgQW5hbHl0aWNzLiBNYWtlIHN1cmUgdG8gcHJvdmlkZSBvbmUgd2hlbiBpbml0aWFsaXppbmcgTmd4R29vZ2xlQW5hbHl0aWNzTW9kdWxlLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IGRlZmF1bHQgZ2EuanMgdXJpXHJcbiAgICAkc2V0dGluZ3MudXJpID0gJHNldHRpbmdzLnVyaSB8fCBgaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD0keyRzZXR0aW5ncy50cmFja2luZ0NvZGV9YDtcclxuXHJcbiAgICAvLyB0aGVzZSBjb21tYW5kcyBzaG91bGQgcnVuIGZpcnN0IVxyXG4gICAgY29uc3QgaW5pdGlhbENvbW1hbmRzOiBBcnJheTxJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZD4gPSBbXHJcbiAgICAgIHsgY29tbWFuZDogJ2pzJywgdmFsdWVzOiBbIG5ldyBEYXRlKCkgXSB9LFxyXG4gICAgICB7IGNvbW1hbmQ6ICdjb25maWcnLCB2YWx1ZXM6IFsgJHNldHRpbmdzLnRyYWNraW5nQ29kZSBdIH1cclxuICAgIF07XHJcblxyXG4gICAgJHNldHRpbmdzLmluaXRDb21tYW5kcyA9IFsgLi4uaW5pdGlhbENvbW1hbmRzLCAuLi4oJHNldHRpbmdzLmluaXRDb21tYW5kcyB8fCBbXSkgXTtcclxuXHJcbiAgICB3aW5kb3dbJ2RhdGFMYXllciddID0gd2luZG93WydkYXRhTGF5ZXInXSB8fCBbXTtcclxuICAgIHdpbmRvd1snZ3RhZyddID0gd2luZG93WydndGFnJ10gfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB3aW5kb3dbJ2RhdGFMYXllciddLnB1c2goYXJndW1lbnRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZm9yIChjb25zdCBjb21tYW5kIG9mICRzZXR0aW5ncy5pbml0Q29tbWFuZHMpIHtcclxuICAgICAgd2luZG93WydndGFnJ10oY29tbWFuZC5jb21tYW5kLCAuLi5jb21tYW5kLnZhbHVlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgczogSFRNTFNjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgIHMuYXN5bmMgPSB0cnVlO1xyXG4gICAgcy5zcmMgPSAkc2V0dGluZ3MudXJpO1xyXG5cclxuICAgIGNvbnN0IGhlYWQ6IEhUTUxIZWFkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICBoZWFkLmFwcGVuZENoaWxkKHMpO1xyXG4gIH07XHJcbn1cclxuIl19