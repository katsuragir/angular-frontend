/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Optional, Input, HostListener } from '@angular/core';
import { GaEventCategoryDirective } from './ga-event-category.directive';
import { GoogleAnalyticsService } from '../services/google-analytics.service';
export class GaEventDirective {
    /**
     * @param {?} $gaCategoryDirective
     * @param {?} $gaService
     */
    constructor($gaCategoryDirective, $gaService) {
        this.$gaCategoryDirective = $gaCategoryDirective;
        this.$gaService = $gaService;
        this.gaBind = 'click';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.gaBind === 'click') {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (this.gaBind === 'focus') {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.gaBind === 'blur') {
            this.trigger();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    trigger() {
        try {
            if (!this.$gaCategoryDirective) {
                throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            }
            if (!this.gaAction) {
                throw new Error('You must provide a gaAction atrribute to identify this event.');
            }
            this.$gaService
                .event(this.gaAction, this.$gaCategoryDirective.gaCategory, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    }
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    throw(err) {
        if (console && console.warn) {
            console.warn(err);
        }
    }
}
GaEventDirective.decorators = [
    { type: Directive, args: [{
                selector: `[gaEvent]`,
                exportAs: 'gaEvent'
            },] }
];
/** @nocollapse */
GaEventDirective.ctorParameters = () => [
    { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
    { type: GoogleAnalyticsService }
];
GaEventDirective.propDecorators = {
    gaAction: [{ type: Input }],
    gaLabel: [{ type: Input }],
    label: [{ type: Input }],
    gaValue: [{ type: Input }],
    gaInteraction: [{ type: Input }],
    gaBind: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
if (false) {
    /** @type {?} */
    GaEventDirective.prototype.gaAction;
    /** @type {?} */
    GaEventDirective.prototype.gaLabel;
    /** @type {?} */
    GaEventDirective.prototype.label;
    /** @type {?} */
    GaEventDirective.prototype.gaValue;
    /** @type {?} */
    GaEventDirective.prototype.gaInteraction;
    /** @type {?} */
    GaEventDirective.prototype.gaBind;
    /**
     * @type {?}
     * @protected
     */
    GaEventDirective.prototype.$gaCategoryDirective;
    /**
     * @type {?}
     * @protected
     */
    GaEventDirective.prototype.$gaService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2EtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWdvb2dsZS1hbmFseXRpY3MvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9nYS1ldmVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFROUUsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7SUFFM0IsWUFDd0Isb0JBQThDLEVBQzFELFVBQWtDO1FBRHRCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBMEI7UUFDMUQsZUFBVSxHQUFWLFVBQVUsQ0FBd0I7UUFTckMsV0FBTSxHQUFXLE9BQU8sQ0FBQztJQVBsQyxDQUFDOzs7O0lBU0QsUUFBUTtJQUNSLENBQUM7Ozs7SUFHRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7SUFDSCxDQUFDOzs7O0lBR0QsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQzs7OztJQUdELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQzFCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUM7Ozs7O0lBRVMsT0FBTztRQUNmLElBQUk7WUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDLENBQUM7YUFDbEY7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2FBQ2xGO1lBRUQsSUFBSSxDQUFDLFVBQVU7aUJBQ1YsS0FBSyxDQUNKLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFDcEMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUMxQixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7U0FDUDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7OztJQUVTLEtBQUssQ0FBQyxHQUFVO1FBQ3hCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQjtJQUNILENBQUM7OztZQXRFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRSxTQUFTO2FBQ3BCOzs7O1lBUlEsd0JBQXdCLHVCQVk1QixRQUFRO1lBWEosc0JBQXNCOzs7dUJBZ0I1QixLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSztzQkFDTCxLQUFLOzRCQUNMLEtBQUs7cUJBQ0wsS0FBSztzQkFLTCxZQUFZLFNBQUMsT0FBTztzQkFPcEIsWUFBWSxTQUFDLE9BQU87cUJBT3BCLFlBQVksU0FBQyxNQUFNOzs7O0lBeEJwQixvQ0FBcUM7O0lBQ3JDLG1DQUF5Qjs7SUFDekIsaUNBQXVCOztJQUN2QixtQ0FBeUI7O0lBQ3pCLHlDQUFnQzs7SUFDaEMsa0NBQWtDOzs7OztJQVZoQyxnREFBb0U7Ozs7O0lBQ3BFLHNDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT3B0aW9uYWwsIElucHV0LCBIb3N0TGlzdGVuZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHYUV2ZW50Q2F0ZWdvcnlEaXJlY3RpdmUgfSBmcm9tICcuL2dhLWV2ZW50LWNhdGVnb3J5LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEdvb2dsZUFuYWx5dGljc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9nb29nbGUtYW5hbHl0aWNzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHYUJpbmQgfSBmcm9tICcuLi90eXBlcy9nYS1iaW5kLnR5cGUnO1xyXG5pbXBvcnQgeyBHYUFjdGlvbiB9IGZyb20gJy4uL3R5cGVzL2dhLWFjdGlvbi50eXBlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiBgW2dhRXZlbnRdYCxcclxuICBleHBvcnRBczogJ2dhRXZlbnQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYUV2ZW50RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgJGdhQ2F0ZWdvcnlEaXJlY3RpdmU6IEdhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZSxcclxuICAgIHByb3RlY3RlZCAkZ2FTZXJ2aWNlOiBHb29nbGVBbmFseXRpY3NTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBnYUFjdGlvbjogR2FBY3Rpb24gfCBzdHJpbmc7XHJcbiAgQElucHV0KCkgZ2FMYWJlbDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgZ2FWYWx1ZTogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIGdhSW50ZXJhY3Rpb246IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZ2FCaW5kOiBHYUJpbmQgPSAnY2xpY2snO1xyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBvbkNsaWNrKCkge1xyXG4gICAgaWYgKHRoaXMuZ2FCaW5kID09PSAnY2xpY2snKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKVxyXG4gIG9uRm9jdXMoKSB7XHJcbiAgICBpZiAodGhpcy5nYUJpbmQgPT09ICdmb2N1cycpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdibHVyJylcclxuICBvbkJsdXIoKSB7XHJcbiAgICBpZiAodGhpcy5nYUJpbmQgPT09ICdibHVyJykge1xyXG4gICAgICB0aGlzLnRyaWdnZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCB0cmlnZ2VyKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCF0aGlzLiRnYUNhdGVnb3J5RGlyZWN0aXZlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgZ2FDYXRlZ29yeSBhdHRyaWJ1dGUgdy8gZ2FFdmVudCBEaXJlY3RpdmUuJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5nYUFjdGlvbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSBhIGdhQWN0aW9uIGF0cnJpYnV0ZSB0byBpZGVudGlmeSB0aGlzIGV2ZW50LicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiRnYVNlcnZpY2VcclxuICAgICAgICAgIC5ldmVudChcclxuICAgICAgICAgICAgdGhpcy5nYUFjdGlvbixcclxuICAgICAgICAgICAgdGhpcy4kZ2FDYXRlZ29yeURpcmVjdGl2ZS5nYUNhdGVnb3J5LFxyXG4gICAgICAgICAgICB0aGlzLmdhTGFiZWwgfHwgdGhpcy5sYWJlbCxcclxuICAgICAgICAgICAgdGhpcy5nYVZhbHVlLFxyXG4gICAgICAgICAgICB0aGlzLmdhSW50ZXJhY3Rpb25cclxuICAgICAgICAgICk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgdGhpcy50aHJvdyhlcnIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHRocm93KGVycjogRXJyb3IpIHtcclxuICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICBjb25zb2xlLndhcm4oZXJyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==