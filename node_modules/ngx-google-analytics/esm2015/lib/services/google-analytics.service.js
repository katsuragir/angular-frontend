/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/ngx-google-analytics-settings-token";
export class GoogleAnalyticsService {
    /**
     * @param {?} $trackingId
     */
    constructor($trackingId) {
        this.$trackingId = $trackingId;
    }
    /**
     * @protected
     * @param {?} err
     * @return {?}
     */
    throw(err) {
        if (console && console.error) {
            console.error(err);
        }
    }
    /**
     * Call native GA Tag
     *
     * @param {?} action config|event
     * @param {?} command Action specialization
     * @param {...?} options Command configuration
     * @return {?}
     */
    gtag(action, command, ...options) {
        try {
            window['gtag'](action, command, ...options);
        }
        catch (err) {
            this.throw(err);
        }
    }
    /**
     * Send an event trigger to GA. It is the same as call:
     * ```js
     * gtag('event', 'video_auto_play_start', {
     *   'event_label': 'My promotional video',
     *   'event_category': 'video_auto_play'
     * });
     * ```
     *
     * @param {?} action 'video_auto_play_start'
     * @param {?=} category 'video_auto_play'
     * @param {?=} label 'My promotional video'
     * @param {?=} value An value to measure something
     * @param {?=} interaction
     * @return {?}
     */
    event(action, category, label, value, interaction) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (category) {
                    opt['event_category'] = category;
                }
                if (label) {
                    opt['event_label'] = label;
                }
                if (value) {
                    opt['value'] = value;
                }
                if (interaction !== undefined) {
                    opt['interaction'] = interaction;
                }
                this.gtag('event', (/** @type {?} */ (action)), opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an page view event. This is the same as
     *
     * ```js
     * gtag('config', 'GA_TRACKING_ID', {
     *   'page_title' : 'Homepage',
     *   'page_path': '/home'
     * });
     * ```
     *
     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
     *
     * @param {?=} path /home
     * @param {?=} title Homepage
     * @param {?=} location '{ page_location }'
     * @param {?=} options '{ ... custom dimentions }'
     * @return {?}
     */
    pageView(path, title, location, options) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (path) {
                    opt['page_path'] = path;
                }
                if (title) {
                    opt['page_title'] = title;
                }
                if (location) {
                    opt['page_location'] = location;
                }
                if (options) {
                    Object.assign(opt, options);
                }
                this.gtag('config', this.$trackingId.trackingCode, opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an evento to report a App Page View. It is the same as
     *
     * ```js
     * gtag('event', 'screen_view', {
     *   'app_name': 'myAppName',
     *   'screen_name' : 'Home'
     * });
     *
     * ```
     *
     * @param {?} screen 'screen_name'
     * @param {?} appName
     * @param {?=} appId 'app_id'
     * @param {?=} appVersion 'app_version'
     * @param {?=} installerId 'app_installer_id'
     * @return {?}
     */
    appView(screen, appName, appId, appVersion, installerId) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (screen) {
                    opt['screen_name'] = screen;
                }
                if (appName) {
                    opt['app_name'] = appName;
                }
                if (appId) {
                    opt['app_id'] = appId;
                }
                if (appVersion) {
                    opt['app_version'] = appVersion;
                }
                if (installerId) {
                    opt['app_installer_id'] = installerId;
                }
                this.gtag('event', 'screen_view', opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
    /**
     * Send an event to GA to report an application error. It is the same as
     *
     * ```js
     * gtag('event', 'exception', {
     *   'description': 'error_description',
     *   'fatal': false   // set to true if the error is fatal
     * });
     * ```
     *
     * @param {?=} description 'error_description'
     * @param {?=} fatal set to true if the error is fatal
     * @return {?}
     */
    exception(description, fatal) {
        try {
            if (window['gtag']) {
                /** @type {?} */
                const opt = {};
                if (description) {
                    opt['description'] = description;
                }
                if (fatal) {
                    opt['fatal'] = fatal;
                }
                this.gtag('event', 'exception', opt);
            }
        }
        catch (error) {
            this.throw(error);
        }
    }
}
GoogleAnalyticsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GoogleAnalyticsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] }
];
/** @nocollapse */ GoogleAnalyticsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(i0.ɵɵinject(i1.NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN)); }, token: GoogleAnalyticsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    GoogleAnalyticsService.prototype.$trackingId;
}
//# sourceMappingURL=data:application/json;base64,