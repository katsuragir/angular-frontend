(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-google-analytics', ['exports', '@angular/core', '@angular/router', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-google-analytics'] = {}, global.ng.core, global.ng.router, global.ng.common));
}(this, function (exports, core, router, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new core.InjectionToken('ngx-hotjar-settings', {
        factory: (/**
         * @return {?}
         */
        function () { return ({ trackingCode: '' }); })
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
        provide: core.APP_INITIALIZER,
        multi: true,
        useFactory: GoogleAnalyticsInitializer,
        deps: [
            NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
        ]
    };
    /**
     * @param {?} $settings
     * @return {?}
     */
    function GoogleAnalyticsInitializer($settings) {
        var _this = this;
        return (/**
         * @return {?}
         */
        function () { return __awaiter(_this, void 0, void 0, function () {
            var e_1, _a, initialCommands, _b, _c, command, s, head;
            return __generator(this, function (_d) {
                if (!$settings.trackingCode) {
                    if (!core.isDevMode()) {
                        console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
                    }
                    return [2 /*return*/];
                }
                // Set default ga.js uri
                $settings.uri = $settings.uri || "https://www.googletagmanager.com/gtag/js?id=" + $settings.trackingCode;
                // these commands should run first!
                initialCommands = [
                    { command: 'js', values: [new Date()] },
                    { command: 'config', values: [$settings.trackingCode] }
                ];
                $settings.initCommands = __spread(initialCommands, ($settings.initCommands || []));
                window['dataLayer'] = window['dataLayer'] || [];
                window['gtag'] = window['gtag'] || (/**
                 * @return {?}
                 */
                function () {
                    window['dataLayer'].push(arguments);
                });
                try {
                    for (_b = __values($settings.initCommands), _c = _b.next(); !_c.done; _c = _b.next()) {
                        command = _c.value;
                        window['gtag'].apply(window, __spread([command.command], command.values));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                s = document.createElement('script');
                s.async = true;
                s.src = $settings.uri;
                head = document.getElementsByTagName('head')[0];
                head.appendChild(s);
                return [2 /*return*/];
            });
        }); });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleAnalyticsService = /** @class */ (function () {
        function GoogleAnalyticsService($trackingId) {
            this.$trackingId = $trackingId;
        }
        /**
         * @protected
         * @param {?} err
         * @return {?}
         */
        GoogleAnalyticsService.prototype.throw = /**
         * @protected
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (console && console.error) {
                console.error(err);
            }
        };
        /**
         * Call native GA Tag
         *
         * @param action config|event
         * @param command Action specialization
         * @param options Command configuration
         */
        /**
         * Call native GA Tag
         *
         * @param {?} action config|event
         * @param {?} command Action specialization
         * @param {...?} options Command configuration
         * @return {?}
         */
        GoogleAnalyticsService.prototype.gtag = /**
         * Call native GA Tag
         *
         * @param {?} action config|event
         * @param {?} command Action specialization
         * @param {...?} options Command configuration
         * @return {?}
         */
        function (action, command) {
            var options = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                options[_i - 2] = arguments[_i];
            }
            try {
                window['gtag'].apply(window, __spread([action, command], options));
            }
            catch (err) {
                this.throw(err);
            }
        };
        /**
         * Send an event trigger to GA. It is the same as call:
         * ```js
         * gtag('event', 'video_auto_play_start', {
         *   'event_label': 'My promotional video',
         *   'event_category': 'video_auto_play'
         * });
         * ```
         *
         * @param action 'video_auto_play_start'
         * @param category 'video_auto_play'
         * @param label 'My promotional video'
         * @param value An value to measure something
         */
        /**
         * Send an event trigger to GA. It is the same as call:
         * ```js
         * gtag('event', 'video_auto_play_start', {
         *   'event_label': 'My promotional video',
         *   'event_category': 'video_auto_play'
         * });
         * ```
         *
         * @param {?} action 'video_auto_play_start'
         * @param {?=} category 'video_auto_play'
         * @param {?=} label 'My promotional video'
         * @param {?=} value An value to measure something
         * @param {?=} interaction
         * @return {?}
         */
        GoogleAnalyticsService.prototype.event = /**
         * Send an event trigger to GA. It is the same as call:
         * ```js
         * gtag('event', 'video_auto_play_start', {
         *   'event_label': 'My promotional video',
         *   'event_category': 'video_auto_play'
         * });
         * ```
         *
         * @param {?} action 'video_auto_play_start'
         * @param {?=} category 'video_auto_play'
         * @param {?=} label 'My promotional video'
         * @param {?=} value An value to measure something
         * @param {?=} interaction
         * @return {?}
         */
        function (action, category, label, value, interaction) {
            try {
                if (window['gtag']) {
                    /** @type {?} */
                    var opt = {};
                    if (category) {
                        opt['event_category'] = category;
                    }
                    if (label) {
                        opt['event_label'] = label;
                    }
                    if (value) {
                        opt['value'] = value;
                    }
                    if (interaction !== undefined) {
                        opt['interaction'] = interaction;
                    }
                    this.gtag('event', (/** @type {?} */ (action)), opt);
                }
            }
            catch (error) {
                this.throw(error);
            }
        };
        /**
         * Send an page view event. This is the same as
         *
         * ```js
         * gtag('config', 'GA_TRACKING_ID', {
         *   'page_title' : 'Homepage',
         *   'page_path': '/home'
         * });
         * ```
         *
         * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
         *
         * @param path /home
         * @param title Homepage
         * @param location '{ page_location }'
         * @param options '{ ... custom dimentions }'
         */
        /**
         * Send an page view event. This is the same as
         *
         * ```js
         * gtag('config', 'GA_TRACKING_ID', {
         *   'page_title' : 'Homepage',
         *   'page_path': '/home'
         * });
         * ```
         *
         * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
         *
         * @param {?=} path /home
         * @param {?=} title Homepage
         * @param {?=} location '{ page_location }'
         * @param {?=} options '{ ... custom dimentions }'
         * @return {?}
         */
        GoogleAnalyticsService.prototype.pageView = /**
         * Send an page view event. This is the same as
         *
         * ```js
         * gtag('config', 'GA_TRACKING_ID', {
         *   'page_title' : 'Homepage',
         *   'page_path': '/home'
         * });
         * ```
         *
         * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
         *
         * @param {?=} path /home
         * @param {?=} title Homepage
         * @param {?=} location '{ page_location }'
         * @param {?=} options '{ ... custom dimentions }'
         * @return {?}
         */
        function (path, title, location, options) {
            try {
                if (window['gtag']) {
                    /** @type {?} */
                    var opt = {};
                    if (path) {
                        opt['page_path'] = path;
                    }
                    if (title) {
                        opt['page_title'] = title;
                    }
                    if (location) {
                        opt['page_location'] = location;
                    }
                    if (options) {
                        Object.assign(opt, options);
                    }
                    this.gtag('config', this.$trackingId.trackingCode, opt);
                }
            }
            catch (error) {
                this.throw(error);
            }
        };
        /**
         * Send an evento to report a App Page View. It is the same as
         *
         * ```js
         * gtag('event', 'screen_view', {
         *   'app_name': 'myAppName',
         *   'screen_name' : 'Home'
         * });
         *
         * ```
         *
         * @param screen 'screen_name'
         * @param name 'app_name'
         * @param appId 'app_id'
         * @param appVersion 'app_version'
         * @param installerId 'app_installer_id'
         */
        /**
         * Send an evento to report a App Page View. It is the same as
         *
         * ```js
         * gtag('event', 'screen_view', {
         *   'app_name': 'myAppName',
         *   'screen_name' : 'Home'
         * });
         *
         * ```
         *
         * @param {?} screen 'screen_name'
         * @param {?} appName
         * @param {?=} appId 'app_id'
         * @param {?=} appVersion 'app_version'
         * @param {?=} installerId 'app_installer_id'
         * @return {?}
         */
        GoogleAnalyticsService.prototype.appView = /**
         * Send an evento to report a App Page View. It is the same as
         *
         * ```js
         * gtag('event', 'screen_view', {
         *   'app_name': 'myAppName',
         *   'screen_name' : 'Home'
         * });
         *
         * ```
         *
         * @param {?} screen 'screen_name'
         * @param {?} appName
         * @param {?=} appId 'app_id'
         * @param {?=} appVersion 'app_version'
         * @param {?=} installerId 'app_installer_id'
         * @return {?}
         */
        function (screen, appName, appId, appVersion, installerId) {
            try {
                if (window['gtag']) {
                    /** @type {?} */
                    var opt = {};
                    if (screen) {
                        opt['screen_name'] = screen;
                    }
                    if (appName) {
                        opt['app_name'] = appName;
                    }
                    if (appId) {
                        opt['app_id'] = appId;
                    }
                    if (appVersion) {
                        opt['app_version'] = appVersion;
                    }
                    if (installerId) {
                        opt['app_installer_id'] = installerId;
                    }
                    this.gtag('event', 'screen_view', opt);
                }
            }
            catch (error) {
                this.throw(error);
            }
        };
        /**
         * Send an event to GA to report an application error. It is the same as
         *
         * ```js
         * gtag('event', 'exception', {
         *   'description': 'error_description',
         *   'fatal': false   // set to true if the error is fatal
         * });
         * ```
         *
         * @param description 'error_description'
         * @param fatal set to true if the error is fatal
         */
        /**
         * Send an event to GA to report an application error. It is the same as
         *
         * ```js
         * gtag('event', 'exception', {
         *   'description': 'error_description',
         *   'fatal': false   // set to true if the error is fatal
         * });
         * ```
         *
         * @param {?=} description 'error_description'
         * @param {?=} fatal set to true if the error is fatal
         * @return {?}
         */
        GoogleAnalyticsService.prototype.exception = /**
         * Send an event to GA to report an application error. It is the same as
         *
         * ```js
         * gtag('event', 'exception', {
         *   'description': 'error_description',
         *   'fatal': false   // set to true if the error is fatal
         * });
         * ```
         *
         * @param {?=} description 'error_description'
         * @param {?=} fatal set to true if the error is fatal
         * @return {?}
         */
        function (description, fatal) {
            try {
                if (window['gtag']) {
                    /** @type {?} */
                    var opt = {};
                    if (description) {
                        opt['description'] = description;
                    }
                    if (fatal) {
                        opt['fatal'] = fatal;
                    }
                    this.gtag('event', 'exception', opt);
                }
            }
            catch (error) {
                this.throw(error);
            }
        };
        GoogleAnalyticsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        GoogleAnalyticsService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] }
        ]; };
        /** @nocollapse */ GoogleAnalyticsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(core.ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN)); }, token: GoogleAnalyticsService, providedIn: "root" });
        return GoogleAnalyticsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {
        provide: core.APP_BOOTSTRAP_LISTENER,
        multi: true,
        useFactory: GoogleAnalyticsRouterInitializer,
        deps: [
            GoogleAnalyticsService,
            router.Router
        ]
    };
    /**
     * @param {?} $gaService
     * @param {?} $router
     * @return {?}
     */
    function GoogleAnalyticsRouterInitializer($gaService, $router) {
        var _this = this;
        return (/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                $router
                    .events
                    .subscribe((/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    if (event instanceof router.NavigationEnd) {
                        $gaService.pageView(event.urlAfterRedirects, undefined, document.location.href);
                    }
                }));
                return [2 /*return*/];
            });
        }); });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GaEventCategoryDirective = /** @class */ (function () {
        function GaEventCategoryDirective() {
        }
        GaEventCategoryDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[gaEvent][gaCategory],\n             [gaCategory]",
                        exportAs: 'gaCategory'
                    },] }
        ];
        /** @nocollapse */
        GaEventCategoryDirective.ctorParameters = function () { return []; };
        GaEventCategoryDirective.propDecorators = {
            gaCategory: [{ type: core.Input }]
        };
        return GaEventCategoryDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GaEventDirective = /** @class */ (function () {
        function GaEventDirective($gaCategoryDirective, $gaService) {
            this.$gaCategoryDirective = $gaCategoryDirective;
            this.$gaService = $gaService;
            this.gaBind = 'click';
        }
        /**
         * @return {?}
         */
        GaEventDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @return {?}
         */
        GaEventDirective.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (this.gaBind === 'click') {
                this.trigger();
            }
        };
        /**
         * @return {?}
         */
        GaEventDirective.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (this.gaBind === 'focus') {
                this.trigger();
            }
        };
        /**
         * @return {?}
         */
        GaEventDirective.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            if (this.gaBind === 'blur') {
                this.trigger();
            }
        };
        /**
         * @protected
         * @return {?}
         */
        GaEventDirective.prototype.trigger = /**
         * @protected
         * @return {?}
         */
        function () {
            try {
                if (!this.$gaCategoryDirective) {
                    throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
                }
                if (!this.gaAction) {
                    throw new Error('You must provide a gaAction atrribute to identify this event.');
                }
                this.$gaService
                    .event(this.gaAction, this.$gaCategoryDirective.gaCategory, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
            }
            catch (err) {
                this.throw(err);
            }
        };
        /**
         * @protected
         * @param {?} err
         * @return {?}
         */
        GaEventDirective.prototype.throw = /**
         * @protected
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (console && console.warn) {
                console.warn(err);
            }
        };
        GaEventDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[gaEvent]",
                        exportAs: 'gaEvent'
                    },] }
        ];
        /** @nocollapse */
        GaEventDirective.ctorParameters = function () { return [
            { type: GaEventCategoryDirective, decorators: [{ type: core.Optional }] },
            { type: GoogleAnalyticsService }
        ]; };
        GaEventDirective.propDecorators = {
            gaAction: [{ type: core.Input }],
            gaLabel: [{ type: core.Input }],
            label: [{ type: core.Input }],
            gaValue: [{ type: core.Input }],
            gaInteraction: [{ type: core.Input }],
            gaBind: [{ type: core.Input }],
            onClick: [{ type: core.HostListener, args: ['click',] }],
            onFocus: [{ type: core.HostListener, args: ['focus',] }],
            onBlur: [{ type: core.HostListener, args: ['blur',] }]
        };
        return GaEventDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GaEventFormInputDirective = /** @class */ (function () {
        function GaEventFormInputDirective($gaEvent) {
            this.$gaEvent = $gaEvent;
        }
        /**
         * @return {?}
         */
        GaEventFormInputDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (this.$gaEvent) {
                this.$gaEvent.gaBind = (this.gaBind)
                    ? this.$gaEvent.gaBind
                    : 'focus';
            }
        };
        GaEventFormInputDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "input[gaEvent],\n             select[gaEvent],\n             textarea[gaEvent]"
                    },] }
        ];
        /** @nocollapse */
        GaEventFormInputDirective.ctorParameters = function () { return [
            { type: GaEventDirective, decorators: [{ type: core.Host }, { type: core.Optional }] }
        ]; };
        GaEventFormInputDirective.propDecorators = {
            gaBind: [{ type: core.Input }]
        };
        return GaEventFormInputDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxGoogleAnalyticsModule = /** @class */ (function () {
        function NgxGoogleAnalyticsModule() {
        }
        /**
         * @param {?} trackingCode
         * @param {?=} commands
         * @param {?=} uri
         * @return {?}
         */
        NgxGoogleAnalyticsModule.forRoot = /**
         * @param {?} trackingCode
         * @param {?=} commands
         * @param {?=} uri
         * @return {?}
         */
        function (trackingCode, commands, uri) {
            if (commands === void 0) { commands = []; }
            return {
                ngModule: NgxGoogleAnalyticsModule,
                providers: [
                    {
                        provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                        useValue: {
                            trackingCode: trackingCode,
                            commands: commands,
                            uri: uri
                        }
                    },
                    NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
                ]
            };
        };
        NgxGoogleAnalyticsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective],
                        exports: [GaEventDirective, GaEventCategoryDirective, GaEventFormInputDirective]
                    },] }
        ];
        return NgxGoogleAnalyticsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxGoogleAnalyticsRouterModule = /** @class */ (function () {
        function NgxGoogleAnalyticsRouterModule() {
        }
        NgxGoogleAnalyticsRouterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            NgxGoogleAnalyticsModule
                        ],
                        providers: [
                            NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER
                        ],
                        declarations: []
                    },] }
        ];
        return NgxGoogleAnalyticsRouterModule;
    }());

    exports.GaEventCategoryDirective = GaEventCategoryDirective;
    exports.GaEventDirective = GaEventDirective;
    exports.GaEventFormInputDirective = GaEventFormInputDirective;
    exports.GoogleAnalyticsInitializer = GoogleAnalyticsInitializer;
    exports.GoogleAnalyticsRouterInitializer = GoogleAnalyticsRouterInitializer;
    exports.GoogleAnalyticsService = GoogleAnalyticsService;
    exports.NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER;
    exports.NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER;
    exports.NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN;
    exports.NgxGoogleAnalyticsModule = NgxGoogleAnalyticsModule;
    exports.NgxGoogleAnalyticsRouterModule = NgxGoogleAnalyticsRouterModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-google-analytics.umd.js.map
